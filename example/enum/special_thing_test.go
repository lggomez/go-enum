// Code generated by go generate; DO NOT EDIT.
// This file was generated at
// 2021-02-01T14:26:42-03:00
// by go-enum

package enum_test

import (
	"encoding/json"
	"fmt"
	"testing"

	"github.com/lggomez/go-enum/example/enum"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"go.mongodb.org/mongo-driver/bson"
)

type fooSpecialThing struct {
	TestValue enum.SpecialThing `json:"special_thing"`
}

type fooSpecialThingOmitEmpty struct {
	TestValue enum.SpecialThing `json:"special_thing,omitempty"`
}

type fooSpecialThingPtr struct {
	TestValue *enum.SpecialThing `json:"special_thing"`
}

type fooSpecialThingPtrOmitEmpty struct {
	TestValue *enum.SpecialThing `json:"special_thing,omitempty"`
}

func TestSpecialThing_MarshalJSON(t *testing.T) {
	t.Run("Marshal_AnnonStructField", func(t *testing.T) {
		v := struct {
			A enum.SpecialThing `json:"special_thing"`
		}{enum.SpecialThingFoo()}
		data, err := json.Marshal(&v)
		require.Nil(t, err)
		assert.EqualValues(t, fmt.Sprintf(`{"special_thing":"%s"}`, v.A.String()), string(data))
	})
	t.Run("Marshal_StructField", func(t *testing.T) {
		v := fooSpecialThing{TestValue: enum.SpecialThing{}}
		data, err := json.Marshal(v)
		require.Nil(t, err)
		assert.EqualValues(t, fmt.Sprintf(`{"special_thing":"%s"}`, v.TestValue.String()), string(data))
	})
	t.Run("Marshal_OmitEmptyStruct", func(t *testing.T) {
		// encoding/json ignores omitempty on struct zero values
		// https://github.com/golang/go/issues/11939
		v := fooSpecialThingOmitEmpty{}
		data, err := json.Marshal(v)
		require.Nil(t, err)
		assert.EqualValues(t, `{"special_thing":""}`, string(data))
	})
	t.Run("Marshal_StructFieldEmptyPtr", func(t *testing.T) {
		vPtr := fooSpecialThingPtr{TestValue: &enum.SpecialThing{}}
		data, err := json.Marshal(vPtr)
		require.Nil(t, err)
		assert.EqualValues(t, `{"special_thing":""}`, string(data))
	})
	t.Run("Marshal_StructFieldPtr", func(t *testing.T) {
		dt := enum.SpecialThingFoo
		val := dt()
		vPtr := fooSpecialThingPtr{TestValue: &val}
		data, err := json.Marshal(vPtr)
		require.Nil(t, err)
		assert.EqualValues(t, fmt.Sprintf(`{"special_thing":"%s"}`, vPtr.TestValue.String()), string(data))
	})
	t.Run("Marshal_StructFieldNilPtr", func(t *testing.T) {
		vPtr := fooSpecialThingPtr{}
		data, err := json.Marshal(vPtr)
		require.Nil(t, err)
		assert.EqualValues(t, `{"special_thing":null}`, string(data))
	})
	t.Run("Marshal_OmitEmptyStructPtr", func(t *testing.T) {
		vPtr := fooSpecialThingPtrOmitEmpty{}
		data, err := json.Marshal(vPtr)
		require.Nil(t, err)
		assert.EqualValues(t, `{}`, string(data))
	})
}

func TestSpecialThing_UnmarshalJSON(t *testing.T) {
	t.Run("Unmarshal_InvalidValue", func(t *testing.T) {
		data := `{"special_thing":"invalid_ee70adab-55d5-4fa0-8bb5-0e99064f0559"}`
		rawData := []byte(data)

		v := struct {
			A enum.SpecialThing `json:"special_thing"`
		}{enum.SpecialThingFoo()}
		err := json.Unmarshal(rawData, &v)
		require.NotNil(t, err)
	})
	t.Run("Unmarshal_AnnonStructField", func(t *testing.T) {
		data := `{"special_thing":"Foo"}`
		rawData := []byte(data)

		v := struct {
			A enum.SpecialThing `json:"special_thing"`
		}{enum.SpecialThingFoo()}
		err := json.Unmarshal(rawData, &v)
		require.Nil(t, err)
		assert.EqualValues(t, "Foo", v.A.String())
	})
	t.Run("Unmarshal_StructField", func(t *testing.T) {
		data := `{"special_thing":"Foo"}`
		rawData := []byte(data)

		v := fooSpecialThing{}
		err := json.Unmarshal(rawData, &v)
		require.Nil(t, err)
		assert.EqualValues(t, "Foo", v.TestValue.String())
	})
	t.Run("Unmarshal_OmitEmptyStruct", func(t *testing.T) {
		data := `{"special_thing":null}`
		rawData := []byte(data)

		v := fooSpecialThingOmitEmpty{}
		err := json.Unmarshal(rawData, &v)
		require.NoError(t, err)
	})
	t.Run("Unmarshal_StructFieldPtr", func(t *testing.T) {
		data := `{"special_thing":"Foo"}`
		rawData := []byte(data)

		vPtr := fooSpecialThingPtr{}
		err := json.Unmarshal(rawData, &vPtr)
		require.Nil(t, err)
		assert.EqualValues(t, "Foo", vPtr.TestValue.String())
	})
	t.Run("Unmarshal_StructFieldNilPtr", func(t *testing.T) {
		data := `{"special_thing":null}`
		rawData := []byte(data)

		vPtr := fooSpecialThingPtr{}
		err := json.Unmarshal(rawData, &vPtr)
		require.Nil(t, err)
		assert.Nil(t, vPtr.TestValue)
	})
}

func TestSpecialThing_EmptyValues(t *testing.T) {
	t.Run("StructField", func(t *testing.T) {
		v := fooSpecialThing{TestValue: enum.SpecialThing{}}
		data, err := json.Marshal(v)
		require.NoError(t, err)
		assert.EqualValues(t, fmt.Sprintf(`{"special_thing":"%s"}`, v.TestValue.String()), string(data))

		v2 := fooSpecialThing{}
		err = json.Unmarshal(data, &v2)
		require.NoError(t, err)
		require.True(t, v2.TestValue.IsEmpty())

		v3 := fooSpecialThing{}
		err = json.Unmarshal(data, &v3)
		require.NoError(t, err)
		require.True(t, v3.TestValue.IsEmpty())
	})
	t.Run("PtrField", func(t *testing.T) {
		v := fooSpecialThingPtr{TestValue: nil}
		data, err := json.Marshal(v)
		require.NoError(t, err)
		assert.EqualValues(t, fmt.Sprintf(`{"special_thing":%s}`, "null"), string(data))

		v2 := fooSpecialThing{}
		err = json.Unmarshal(data, &v2)
		require.NoError(t, err)
		require.True(t, v2.TestValue.IsEmpty())

		v3 := fooSpecialThing{}
		err = json.Unmarshal(data, &v3)
		require.NoError(t, err)
		require.True(t, v3.TestValue.IsEmpty())
	})
}

func TestSpecialThing_UndefinedValue(t *testing.T) {
	require.True(t, enum.SpecialThing{}.IsUndefined())
}

func TestSpecialThing_ForEach(t *testing.T) {
	j := 0
	enum.EnumSpecialThing.ForEach(func(i int, enumValue enum.SpecialThing) {
		j++
		value, found := enum.SpecialThingFromValue(enumValue.String(), false)
		assert.True(t, found)
		assert.True(t, value == enumValue)

		assert.True(t, enumValue.Equals(value.String()))
		assert.True(t, enumValue.EqualsIgnoreCase(value.String()))
		assert.True(t, value.Equals(enumValue.String()))
		assert.True(t, value.EqualsIgnoreCase(enumValue.String()))
	})
	assert.EqualValues(t, enum.EnumSpecialThing.Len(), j)
}

func TestSpecialThing_TextCodec(t *testing.T) {
	t.Run("MarshalText_Valid", func(t *testing.T) {
		c := fooSpecialThing{TestValue: enum.SpecialThingFoo()}

		data, err := c.TestValue.MarshalText()
		require.Nil(t, err)
		require.True(t, len(data) > 0)
	})
	t.Run("UnmarshalText_Valid", func(t *testing.T) {
		c := &fooSpecialThing{TestValue: enum.SpecialThingFoo()}
		err := c.TestValue.UnmarshalText([]byte("Foo"))
		require.Nil(t, err)
		require.EqualValues(t, enum.SpecialThingFoo().String(), c.TestValue.String())
	})
	t.Run("UnmarshalText_Invalid", func(t *testing.T) {
		c := &fooSpecialThing{TestValue: enum.SpecialThingFoo()}
		err := c.TestValue.UnmarshalText([]byte(""))
		require.NoError(t, err)
		err = c.TestValue.UnmarshalText([]byte("invalid_ee70adab-55d5-4fa0-8bb5-0e99064f0559"))
		require.NotNil(t, err)
	})
}

func TestSpecialThing_Stringer(t *testing.T) {
	c := fooSpecialThing{TestValue: enum.SpecialThingFoo()}
	require.EqualValues(t, "Foo", c.TestValue.String())
}

func TestSpecialThing_DriverValues(t *testing.T) {
	t.Run("Scan_String", func(t *testing.T) {
		c := &fooSpecialThing{TestValue: enum.SpecialThingFoo()}
		require.Nil(t, c.TestValue.Scan(enum.SpecialThingFoo().String()))
		require.EqualValues(t, enum.SpecialThingFoo().String(), c.TestValue.String())
	})
	t.Run("Scan_Bytes", func(t *testing.T) {
		c := &fooSpecialThing{TestValue: enum.SpecialThingFoo()}
		require.Nil(t, c.TestValue.Scan([]byte(enum.SpecialThingFoo().String())))
		require.EqualValues(t, enum.SpecialThingFoo().String(), c.TestValue.String())
	})
	t.Run("Scan_Invalid", func(t *testing.T) {
		c := &fooSpecialThing{TestValue: enum.SpecialThingFoo()}
		require.NotNil(t, c.TestValue.Scan(1))
	})
	t.Run("Scan_Invalid", func(t *testing.T) {
		c := fooSpecialThing{TestValue: enum.SpecialThingFoo()}

		v, err := c.TestValue.Value()
		assert.Nil(t, err)
		require.EqualValues(t, enum.SpecialThingFoo().String(), fmt.Sprintf("%v", v))
	})
}

func TestSpecialThing_BinaryCodec(t *testing.T) {
	t.Run("MarshalBinary_Valid", func(t *testing.T) {
		c := fooSpecialThing{TestValue: enum.SpecialThingFoo()}

		data, err := c.TestValue.MarshalBinary()
		require.Nil(t, err)
		assert.Len(t, data, 3)
	})
	t.Run("UnmarshalBinary_Valid", func(t *testing.T) {
		c := &fooSpecialThing{TestValue: enum.SpecialThingFoo()}
		err := c.TestValue.UnmarshalBinary([]byte("Foo"))
		require.Nil(t, err)
		require.EqualValues(t, enum.SpecialThingFoo().String(), c.TestValue.String())
	})
	t.Run("UnmarshalText_Invalid", func(t *testing.T) {
		c := &fooSpecialThing{TestValue: enum.SpecialThingFoo()}
		err := c.TestValue.UnmarshalBinary(nil)
		require.NoError(t, err)
		err = c.TestValue.UnmarshalBinary([]byte("invalid_ee70adab-55d5-4fa0-8bb5-0e99064f0559"))
		require.NotNil(t, err)
	})
}

func TestSpecialThing_GobCodec(t *testing.T) {
	t.Run("MarshalBinary_Valid", func(t *testing.T) {
		c := fooSpecialThing{TestValue: enum.SpecialThingFoo()}

		data, err := c.TestValue.GobEncode()
		require.Nil(t, err)
		assert.Len(t, data, 3)
	})
	t.Run("UnmarshalBinary_Valid", func(t *testing.T) {
		c := &fooSpecialThing{TestValue: enum.SpecialThingFoo()}
		err := c.TestValue.GobDecode([]byte("Foo"))
		require.Nil(t, err)
		require.EqualValues(t, enum.SpecialThingFoo().String(), c.TestValue.String())
	})
	t.Run("UnmarshalText_Invalid", func(t *testing.T) {
		c := &fooSpecialThing{TestValue: enum.SpecialThingFoo()}
		err := c.TestValue.GobDecode(nil)
		require.NoError(t, err)
		err = c.TestValue.GobDecode([]byte("invalid_ee70adab-55d5-4fa0-8bb5-0e99064f0559"))
		require.NotNil(t, err)
	})
}

func TestSpecialThing_MarshalBSON(t *testing.T) {
	t.Run("MarshalBSON_Valid", func(t *testing.T) {
		c := fooSpecialThing{TestValue: enum.SpecialThingFoo()}

		data, err := c.TestValue.MarshalBSON()
		require.Nil(t, err)
		assert.Len(t, data, 19)
	})
}

func TestSpecialThing_UnmarshalBSON(t *testing.T) {
	t.Run("UnmarshalBSON_Valid", func(t *testing.T) {
		c := fooSpecialThing{TestValue: enum.SpecialThingFoo()}

		v1 := &c
		rawData, err := bson.Marshal(v1)
		require.Nil(t, err)

		v2 := &fooSpecialThing{}
		err = bson.Unmarshal(rawData, &v2)
		require.Nil(t, err)
		assert.EqualValues(t, "Foo", v2.TestValue.String())
	})
}
