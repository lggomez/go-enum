// Code generated by go generate; DO NOT EDIT.
// This file was generated at
// 2021-02-01T14:26:42-03:00
// by go-enum

package enum

import (
	"fmt"
)

/**
 *
 * init: register enum to the internal index
 *
 **/
//nolint:gochecknoinits // enum has to register itself for unmarshaling at runtime
func init() {
	if _, ok := enumIndex[specialThingKey]; ok {
		panic(fmt.Sprintf("enum: enumeration %s is already registered", specialThingKey))
	}
	enumIndex[specialThingKey] = specialThingValueIndex
}

/**
 *
 * Type aliases and declarations
 *
 **/

type SpecialThing struct {
	stringEnumValue
}

func SpecialThingFromValue(value string, ignoreCase bool) (SpecialThing, bool) {
	result, found := fromValue(value, ignoreCase, specialThingKey)
	return SpecialThing{result}, found
}

type specialThingList []func() SpecialThing

// specialThingEnum is a type and memory safe iterable enumeration of SpecialThing values
type specialThingEnum struct {
	specialThingList
}

func (e specialThingEnum) ForEach(f func(int, SpecialThing)) {
	for i, e := range e.specialThingList {
		f(i, e())
	}
}

func (e specialThingEnum) Len() int {
	return len(e.specialThingList)
}

/**
 *
 * Private value index, key
 *
 **/

var (
	specialThingValueIndex = valueIndex{
		"Bar":  {},
		"Baz":  {},
		"Foo":  {},
		"Quux": {},
	}
	specialThingKey = "SpecialThing"
)

/**
 *
 * Public enumeration
 *
 **/

var (
	SpecialThingBar  = func() SpecialThing { return SpecialThing{stringEnumValue{"Bar", specialThingKey}} }
	SpecialThingBaz  = func() SpecialThing { return SpecialThing{stringEnumValue{"Baz", specialThingKey}} }
	SpecialThingFoo  = func() SpecialThing { return SpecialThing{stringEnumValue{"Foo", specialThingKey}} }
	SpecialThingQuux = func() SpecialThing { return SpecialThing{stringEnumValue{"Quux", specialThingKey}} }

	EnumSpecialThing = specialThingEnum{specialThingList{
		SpecialThingBar,
		SpecialThingBaz,
		SpecialThingFoo,
		SpecialThingQuux,
	}}
)

/**
 *
 * Proxy methods for enum unmarshaling
 *
 **/

func (e *SpecialThing) UnmarshalJSON(data []byte) error {
	e.key = specialThingKey
	return e.stringEnumValue.UnmarshalJSON(data)
}

func (e *SpecialThing) UnmarshalText(text []byte) error {
	e.key = specialThingKey
	return e.stringEnumValue.UnmarshalText(text)
}

func (e *SpecialThing) UnmarshalBSON(data []byte) error {
	e.key = specialThingKey
	return e.stringEnumValue.UnmarshalBSON(data)
}

func (e *SpecialThing) UnmarshalBinary(data []byte) error {
	e.key = specialThingKey
	return e.stringEnumValue.UnmarshalBinary(data)
}

func (e *SpecialThing) GobDecode(data []byte) error {
	e.key = specialThingKey
	return e.stringEnumValue.GobDecode(data)
}

func (e *SpecialThing) Scan(raw interface{}) error {
	e.key = specialThingKey
	return e.stringEnumValue.Scan(raw)
}
