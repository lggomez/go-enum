// Code generated by go generate; DO NOT EDIT.
// This file was generated at
// 2021-02-01T14:26:42-03:00
// by go-enum

package enum

import (
	"fmt"
)

/**
 *
 * init: register enum to the internal index
 *
 **/
//nolint:gochecknoinits // enum has to register itself for unmarshaling at runtime
func init() {
	if _, ok := enumIndex[countriesIso31661Key]; ok {
		panic(fmt.Sprintf("enum: enumeration %s is already registered", countriesIso31661Key))
	}
	enumIndex[countriesIso31661Key] = countriesIso31661ValueIndex
}

/**
 *
 * Type aliases and declarations
 *
 **/

type CountriesIso31661 struct {
	stringEnumValue
}

func CountriesIso31661FromValue(value string, ignoreCase bool) (CountriesIso31661, bool) {
	result, found := fromValue(value, ignoreCase, countriesIso31661Key)
	return CountriesIso31661{result}, found
}

type countriesIso31661List []func() CountriesIso31661

// countriesIso31661Enum is a type and memory safe iterable enumeration of CountriesIso31661 values
type countriesIso31661Enum struct {
	countriesIso31661List
}

func (e countriesIso31661Enum) ForEach(f func(int, CountriesIso31661)) {
	for i, e := range e.countriesIso31661List {
		f(i, e())
	}
}

func (e countriesIso31661Enum) Len() int {
	return len(e.countriesIso31661List)
}

/**
 *
 * Private value index, key
 *
 **/

var (
	countriesIso31661ValueIndex = valueIndex{
		"Ar": {},
		"Ca": {},
		"Us": {},
		"Uy": {},
	}
	countriesIso31661Key = "CountriesIso31661"
)

/**
 *
 * Public enumeration
 *
 **/

var (
	CountriesIso31661AR = func() CountriesIso31661 { return CountriesIso31661{stringEnumValue{"Ar", countriesIso31661Key}} }
	CountriesIso31661CA = func() CountriesIso31661 { return CountriesIso31661{stringEnumValue{"Ca", countriesIso31661Key}} }
	CountriesIso31661US = func() CountriesIso31661 { return CountriesIso31661{stringEnumValue{"Us", countriesIso31661Key}} }
	CountriesIso31661UY = func() CountriesIso31661 { return CountriesIso31661{stringEnumValue{"Uy", countriesIso31661Key}} }

	EnumCountriesIso31661 = countriesIso31661Enum{countriesIso31661List{
		CountriesIso31661AR,
		CountriesIso31661CA,
		CountriesIso31661US,
		CountriesIso31661UY,
	}}
)

/**
 *
 * Proxy methods for enum unmarshaling
 *
 **/

func (e *CountriesIso31661) UnmarshalJSON(data []byte) error {
	e.key = countriesIso31661Key
	return e.stringEnumValue.UnmarshalJSON(data)
}

func (e *CountriesIso31661) UnmarshalText(text []byte) error {
	e.key = countriesIso31661Key
	return e.stringEnumValue.UnmarshalText(text)
}

func (e *CountriesIso31661) UnmarshalBSON(data []byte) error {
	e.key = countriesIso31661Key
	return e.stringEnumValue.UnmarshalBSON(data)
}

func (e *CountriesIso31661) UnmarshalBinary(data []byte) error {
	e.key = countriesIso31661Key
	return e.stringEnumValue.UnmarshalBinary(data)
}

func (e *CountriesIso31661) GobDecode(data []byte) error {
	e.key = countriesIso31661Key
	return e.stringEnumValue.GobDecode(data)
}

func (e *CountriesIso31661) Scan(raw interface{}) error {
	e.key = countriesIso31661Key
	return e.stringEnumValue.Scan(raw)
}
