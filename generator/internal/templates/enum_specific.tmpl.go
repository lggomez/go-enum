package templates

var EnumImplTemplate = `{{- if not .OmitGeneratedNotice}}
// Code generated by go generate; DO NOT EDIT.
// This file was generated at
// {{ .Timestamp }}
// by go-enum
{{- end }}

package {{ .Package }}

import (
	"fmt"
)

/**
 *
 * init: register enum to the internal index
 *
 **/
//nolint:gochecknoinits // enum has to register itself for unmarshaling at runtime
func init() {
	if _, ok := enumIndex[{{ .IndexKeyName }}]; ok {
		panic(fmt.Sprintf("enum: enumeration %s is already registered", {{ .IndexKeyName }}))
	}
	enumIndex[{{ .IndexKeyName }}] = {{ .StructNameLowerCase }}ValueIndex
}

/**
 *
 * Type aliases and declarations
 *
 **/

type {{ .StructName }} struct {
	stringEnumValue
}

func {{ .StructName }}FromValue(value string, ignoreCase bool) ({{ .StructName }}, bool) {
	result, found := fromValue(value, ignoreCase, {{ .IndexKeyName }})
	return {{ .StructName }}{result}, found
}

type {{ .StructNameLowerCase }}List []func() {{ .StructName }}

// {{ .StructNameLowerCase }}Enum is a type and memory safe iterable enumeration of {{ .StructName }} values
type {{ .StructNameLowerCase }}Enum struct {
	{{ .StructNameLowerCase }}List
}

func (e {{ .StructNameLowerCase }}Enum) ForEach(f func(int, {{ .StructName }})) {
	for i, e := range e.{{ .StructNameLowerCase }}List {
		f(i, e())
	}
}

func (e {{ .StructNameLowerCase }}Enum) Len() int {
	return len(e.{{ .StructNameLowerCase }}List)
}

/**
 *
 * Private value index, key
 *
 **/

var (
	{{ .StructNameLowerCase }}ValueIndex = valueIndex{
        {{- range $value := .Values }}
            "{{ $value }}": {},
        {{- end }}
	}
	{{ .IndexKeyName }} = "{{ .StructName }}"
)

/**
 *
 * Public enumeration
 *
 **/

var (
	{{- $save := . }}
	{{- range $key, $value := .Values }}
		{{ $save.StructName }}{{ $key }} = func() {{ $save.StructName }} { return {{ $save.StructName }}{stringEnumValue{"{{ $value }}", {{ $save.IndexKeyName }} }} }
	{{- end }}

	Enum{{ $save.StructName }} = {{ $save.StructNameLowerCase }}Enum{ {{ $save.StructNameLowerCase }}List{
	{{- range $key, $value := .Values }}
		{{ $save.StructName }}{{ $key }},
	{{- end }}
	}}
)

/**
 *
 * Proxy methods for enum unmarshaling
 *
 **/

func (e *{{ .StructName }}) UnmarshalJSON(data []byte) error {
	e.key = {{ .IndexKeyName }}
	return e.stringEnumValue.UnmarshalJSON(data)
}

func (e *{{ .StructName }}) UnmarshalText(text []byte) error {
	e.key = {{ .IndexKeyName }}
	return e.stringEnumValue.UnmarshalText(text)
}

func (e *{{ .StructName }}) UnmarshalBSON(data []byte) error {
	e.key = {{ .IndexKeyName }}
	return e.stringEnumValue.UnmarshalBSON(data)
}

func (e *{{ .StructName }}) UnmarshalBinary(data []byte) error {
	e.key = {{ .IndexKeyName }}
	return e.stringEnumValue.UnmarshalBinary(data)
}

func (e *{{ .StructName }}) GobDecode(data []byte) error {
	e.key = {{ .IndexKeyName }}
	return e.stringEnumValue.GobDecode(data)
}

func (e *{{ .StructName }}) Scan(raw interface{}) error {
	e.key = {{ .IndexKeyName }}
	return e.stringEnumValue.Scan(raw)
}

`
